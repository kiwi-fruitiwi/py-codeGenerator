





‚äº¬≤.üìπ‚Üíüìá 5.11 testing strategy
	project 10's syntax analyzer cannot discern between identifiers
	now that we've developed a plan for a symbol table, we can change this
	test understanding with symbol table handling by examining XML

	extend handling of identifiers
		output identifier category: var, argument, static, field, class, srt
		if category is var, arg, static, field, output also running index
		output whether identifier is being defined or used

	implementation
		implement symbolTable API
		extend syntax analyzer with identifier handling. eyeball XML
		run on test programs in project 10

	staged development plan with unit testing
		test programs for evolving compiler
			seven
				arithmetic expression involving constants only
				do + return statements
			convertToBin
				arbitrarily choose output location
				converts RAM[8000] to binary ‚Üí 16 bits in RAM[8001-8016]
				tests:
					expressions without arrays or method calls
					procedural constructs: if while do let return
				tips for testing the compiled code
					cannot access RAM in 'no animation' mode
					use binoculars to look at address 8000
					click 'stop' button to see the results in state of the RAM
			square: constructors, methods, expression including method calls
				multiple files! Square, SquareGame, Main
			average: arrays and strings
			pong: complete object-oriented app with objects, static vars
				compile Bat, PongGame, Main, Ball
				delay execution. reduce speed slider to play game
			complexArrays: handles array manipulation with fancy indices
				a[b[a[3]]] = a[a[5]] * b[7-a[3]-Main.double(2)+1];
				test easily via screen's Output
		use compiler to compile the program directory
		inspect generated code
		if no errors, load directory into VM emulator
		run compiled program ‚Üí inspect results
		if problem, fix compiler and repeat

	compilers don't generate exactly the same VM code. that's okay!
	pop temp 0 after do Output.printInt gets rid of extra value
	push constant 0 follows contract with another dummy value

	recap
		extend syntax analyzer into full-scale compiler
		test evolving compiler on supplied test programs AS YOU DEVELOP IT



‚äº¬≤.üìπ‚Üí‚úí unit 5.10 proposed implementation
	project 10 created a syntax analyzer
	project 11 extends the analyzer into a full-scale compiler
		stage 0: syntax analyzer is done
		stage 1: symbol table handling so everything isn't just an identifier
			test via richer XML code with refined identifier description
		stage 2: code generation
	jackCompiler works on .jack files and directories
		for each .jack source file, compiler creates a JackTokenizer +output
		compiler uses symbolTable, compilationEngine, VMWriter modules
	symbolTable
		scope of static, field variables: class in which they are defined
		scope of argument, local variables: subroutine code. unknown outside
		compiler never needs more than 2 symbol tables
			subroutine level table can be reset every subroutine
			class level table can be reset every class :3
		API ‚Üí
			startSubroutine: resets table
			define(name, type, kind: STATIC, FIELD, ARG, VAR)
			varCount(kind): returns number of symbols already defined
			kindOf(name)
			typeOf(name)
			indexOf(name)
		when compiling error-free Jack code, each symbol not found in the two symbol tables can be assumed to be either a subroutine name or a class name. This covers all bases for 'identifier'.
	VMWriter ‚Üê a list of wrapper functions
		writePush(segment, index)
		writePop(segment, index)
		writeArithmetic(command)
		writeLabel, Goto, If,
		writeCall(name, nArgs), Function(name, nLocals)
		return
		close
	compilationEngine
		organized as a series of compile‚Çì routines
		each compile routine should read the ‚Çì construct from the input
			advance and compile


‚äº¬≤.üìπ‚Üí‚úí‚Üíüìá unit 5.9: standard VM mapping
	compiler is 2-tiered: jack to VM, VM to target platform machine language
	The standard mapping over the VM platform specifies how to map:
		the constructs of the high-level language onto
		the constructs of the virtual machine.
	different languages have different documents describing standard mappings

	files and subroutines mapping
		each file filename.jack ‚Üí filename.vm
		each subroutine subName in fileName.jack ‚Üí VM func fileName.subName
		jack constructor / function with k args ‚Üí VM func, k args
		jack method with k args ‚Üí VM function with k+1 args

	methods, constructors, functions all mapped to vm functions with caveats

	mapping variables
		4 kinds of variables: local, static, field, argument
		local variables ‚Üí virtual segment local
		üìá first two variables declared in subroutine:
			mapped onto local 0, local 1
		argument variables ‚Üí argument 0, 1, ...n
		static variables ‚Üí static 0, 1, 2, 3, ...n
		field variables
			assume pointer 0 assigned to this
			ith field is mapped onto this i

	mapping arrays: arr[i]
		set point 1 to entry's address (arr+i)
		access that 0

	mapping subroutines
		three types: methods, functions, constructors
		convention: compiled VM code must set base of this segment to arg 0
			method acts on current object
			now this 0, this 1, etc. act as placeholders for the fields

		constructors
			set base of segment this to new object's base address
			return object's base address to the caller

		void functions or methods
			every VM function must return a value
			void functions return constant 0
			caller must remember it called a void subroutine
				get rid of top of stack

	compiling costants
		null and false are mapped to constant 0
		true is mapped to constant -1 ‚Üê push 1, neg

	OS classes and subroutines
		Math, Memory, Screen, Output, Keyboard, String, Array, Sys
		OS class files must reside in same directory as VM files

		multiplication handled by Math.multiply()
		division handled by Math.divide()
		String constants created with OS constructor String.new(length)
		String assignments: String.appendChar per character

		Memory.alloc(size=#fields)
			There is a 1:1 mapping between the size parameter of Memory.alloc and the number of fields in a new object because each field is 16 bits long.



‚äº¬≤.üìπ unit 5.8: handling arrays
	array construction
		var Array arr; ‚Üí allocate local variable, initialize to 0
			generates no code. only affects symbol table
		later on in the program, if we want to construct array with:
			let arr = Array.new(5);
			‚Üí allocate sufficient space in the heap with base addr local0
			from caller's perspective handled exactly like object construction
	THIS‚ÜêRAM[3] and THAT‚ÜêRAM[4] reminder.
		holds addr to this and that segments
		portable, park wherever we want in the RAM
		this ‚Üê current object values
			base addr THIS, set with pop pointer 0
		that ‚Üê values of current array.
			base addr THAT, set with pop pointer 1
	RAM access using 'that'
		// RAM[8056] = 17
		push 8056
		pop pointer 1
		push 17
		pop that 0

		pop pointer 1 ‚Üê sets 'that' = stack.pop()
			aligns 0 with the RAM address whose value is THAT
		pop that 0
			sets 'that 0' = stack.pop()
			sets RAM address aligned with 'that 0' to the same value

	array access
		// arr[2] = 17
		push arr  # base address
		push 2  # offset
		add
		pop pointer 1
		push 17
		pop that 0

		note we only use 'that 0' but not 'that n'
			we could have written this instead:
				push arr
				pop pointer 1
				push 17
				pop that 2
			but this only works when the array index is constant:
				arr[x]=y doesn't work
		note the VM code knows nothing about the host RAM
			code is safe and should run on different platforms
			can't make assumptions on underlying hardware platforms
			virtue of working with virtual machine

	arr[expression‚ÇÅ] = expression‚ÇÇ
		push arr
		push expression‚ÇÅ
		add
		pop pointer 1
		push expression‚ÇÇ
		pop that 0

		but there's a problem here: a[i] = b[j]
			push a
			push i
			add
			pop pointer 1

			# now handle the right side
			push b
			push j
			add
			pop pointer 1 ‚Üê crash! pointer 1 overrides previous address

		let's create a tmp variable to store
			push a
			push i
			add

			push b
			push j
			add

			# now stack contains RAM addresses of a[i] and b[j]
			pop pointer 1
			pop temp 0  # store b[j]
			pop pointer 1  # now we can pop addr of a[i] onto 'that'
			push temp 0  # b[j] ‚Üí stack
			pop that 0

		generalizing solution: works for infinite nesting?
			push arr
			VM code for computing and pushing value of expression‚ÇÅ
			add
			VM code for computing and pushing value of expression‚ÇÇ
			pop temp 0	# temp 0 = value of expression‚ÇÇ
						# top stack value = RAM address of arr[expression‚ÇÅ]
			pop pointer 1
			push temp 0
			pop that 0



‚äº¬≤.üìπ unit 5.7 object manipulation
	handling objects tasks: construction, manipulation
		compiling obj.methodCall()
		compiling methods
	examples
		let x = p1.getx()
		let p3 = p1.plus(p2)
		let d = p1.distance(p2) ‚Üê distance is the caller

		while the following is the callee definition:

		method int distance(Point other) {
			var int dx, dy;
			let dx = x - other.getx();
			let dy = y - other.gety();
			return Math.sqrt((dx*dx) + (dy*dy));
		}

	challenge of compiling object oriented code: procedural machine language
		if you want to use subroutine like distance. apply method on object
		but machine language is procedural
		take object and always pass in as first argument, like python
			then push rest of arguments
			then call

		in: let d = p2.distance(p2), generated VM code looks like:
			push p1
			push p2
			call distance

	methods designed to act on current object: this
		how do we facilitate access to these fields?
		access i·µó ∞ field by using: this i
		we anchor 'this' segment using 'pointer'

	compiling methods
		no code is generated for method declaration, variable declaration
			only symbol table is updated
			anchor 'this', which the caller passed conveniently as argument 0

		generated VM code:
			# method int distance(Point other)
			# var int dx, dy ‚Üê symbol table updates, no VM code

			# associate THIS memory segment with object we're operating on
			push argument 0
			pop pointer 0  # THIS = argument 0, pointer 0 = THIS

			# let dx = x - other.getx()
			push this 0  ‚Üê puts x on the stack. this 0 means first field var
			push argument 1  ‚Üê puts Point other on stack
			call Point.getx 1  ‚Üê calls getx with two objects on stack
			‚Üë '1' doesn't count the current object as an argument, only other

			sub  # x - other.getx()
			pop local 0  # stores to dx, the 1À¢·µó local var

		after any method, we must return something to the caller
			# compiled caller code for: let d = p1.distance(p2);
			...
			push p1
			push p2
			call Point.distance
			push d
			...

		compiling void methods
			method void print() generates only one symbol table entry
				name:this, type:Point, kind:argument, #:0
			next we generate code that associates 'this' memory segment
				with the object the method operates on
				‚Üí push argument 0; pop pointer 0
			we must return a value!
				push constant 0
				return
			the compiled caller code needs to dump the return value
				do p1.print(); ‚Üí
					push p1
					call Point.print
					pop temp 0



‚äº¬≤.üìπ 5.6 handling objects: construction
	compiler faces challenge of compiling client class, then Point class
		not necessarily in that order!
		let p1 = Point.new(2, 3); ‚Üê caller
		constructor Point new(...) ‚Üê callee
	each object has a spot on the heap
		the stack holds object addresses. these point to the heap
	whenever compiler encounters variable declaration, no code generated
		just updates the subroutine's symbol table
	handling calls to create new objects
	let p1 = Point.new(2, 3)
		push 2
		push 3
		call Point.new
		pop p1 ‚Üê p1 is the base address of the new object
	remember the contract! caller assumes constructor's code
		1. arranges a memory block to store the new object
		2. returns its base address to the caller
	example:
		var Point p1, p2;
		var int d;

		during compile time, compiler maps
			p1 on local 0, p2 on local 1, d on local 2
		during run time, execution of the constructor's code effects creation of objects themselves on the heap

	purpose of constructor
		arrange creation of new object
		initializes new object to some intial state
		‚Üí constructor must have access to object's fields via THIS segment
			but first constructor must anchor THIS using POINTER
	example:
		constructor Point new(int ax, int ay)
		‚Üí generates no code, just creates symbol table for subroutine
		compiler knows it generates code for constructor
			knows constructor must create space in RAM for new object
			how does compiler know how much space is needed?
				by consulting the subroutine symbol table! all values 16-bit
			for ax, ay, we must secure memory block with two words
			OS helps with allocate(n)
				‚Üí finds memory block in RAM n words long that's free!
				implementation is clever and elegant. implement in OS module

		# constructor Point new(int ax, int ay)
			push 2 ‚Üê two 16-bit words required (x and y)
			call Memory.alloc 1 ‚Üê one argument (the 2 we just pushed)
				# returns base address of newly created object
			pop pointer 0 ‚Üê THIS now points to addr of new object!

		# let x = ax; let y = ay ‚Üê put arguments into new object :3
			push argument 0
			pop this 0
			push argument 1
			pop this 1

		# let pointCoint = pointCount + 1;
			push static 0
			push 1
			add
			pop static 0

		# return this
			push pointer 0 ‚Üê THIS is already anchored correctly
								and contains base addr of THIS
			return ‚Üê returns base address of newly created object

	# let p1 = Point.new(2,3)
		push 2
		push 3
		call Point.new
		pop p1
		‚Üí after calling Point.new, we pop the new base addr onto p1 :D



‚äº¬≤.üìπ 5.5 handling objects: low-level aspects
	sequence of three units on handling objects!
	let's explore low level aspects of data handling using VM commands
	programmer friendly abstractions! levels of programming languages:
		high, OO: create and manipulate arrays, objects
		mid, VM: operate on virtual memory segments
		low machine language
	everything we do at VM level reduces to operations on the RAM
	first 5 words in RAM are SP LCL ARG THIS THAT
		followed by the stack, then heap
		local and argument variables are stored ‚Üí stack
		objects and array data ‚Üí heap
		in order to access these, we need to anchor THIS and THAT
			use virtual 'pointer' segment instead of THIS and THAT
			üïØ why?
	üåä examples



‚äº¬≤.üìπ 5.4 handling flow of control
	5 possible statements: [while, if] are the challenging ones
		let, do, return are trivial

	if (expression) {statements‚ÇÅ} else {statements‚ÇÇ}
		use a flow chart to rewrite this
		negate if expression:
			if not expression:
				statements‚ÇÇ
			else:
				statements‚ÇÅ

		note that below, the labels must be unique
		VM code
			compiled (expression)
			not ‚Üê negates our expression
			if-goto L1
			compiled (statements‚ÇÅ) ‚Üê executes if expression was true
			goto L2
		label L1
			compiled (statements‚ÇÇ)
		label L2

	while (expression) {statements}
		pseudocode
			negate expression
			if not expression:
				pass
			else:
				statements

		VM code
			label L1
				compiled (expression)
				not
				if-goto L2
				compiled (statements)
				goto L1
			label L2

	minor complications
		program typically containts multiple if and while statements
			thus labels must be unique, perhaps using a counter
		if and while statements are often nested in 'telescopic code'
			a compiler should be able to support infinite nesting given memory
			our compiler's recursive strategy already takes care of this

	compiling variables, expressions, and flow of control
		‚Üí allows us to build array-less simple procedural language
		remember we don't translate down to machine language because ‚ÜíVM
		it's manageable and elegant because we took care of the VM abstraction



‚äº¬≤.üìπ 5.3 handling expressions
	parse trees:
		infix ‚Üê human oriented, source language
			a*(b+c)
		prefix ‚Üê functional notation. function comes first, then arguments
			*a+bc
		postfix ‚Üê stack oriented
			abc+*
	source is infix, compiler translates to postfix for stack machine
	we've already implemented parse tree tech with syntax analyzer's xml output
	depth first tree traversal does this
		go all the way down, push leaf, backtrack, repeat
		we're not using this

	# well-equipped to take infix source and convert to postfix
	codeWrite(expression):
		match expression:
			case number n:
				output 'push n'
			case variable var:
				output 'push var' ‚Üê local 0, static 2. using symbol table
			case 'exp‚ÇÅ op exp‚ÇÇ': use recursion!
				codeWrite(exp‚ÇÅ)
				codeWrite(exp‚ÇÇ)
				output 'op'
			case 'op expression':
				codewrite(expression)
				output 'op'
			case f(exp‚ÇÅ, exp‚ÇÇ, ...):
				codeWrite(exp‚ÇÅ)
				codeWrite(exp‚ÇÇ)
				codeWrite(exp.)
				output 'call f' ‚Üê function call

	üåä take some time to play with a few expressions

	switch from parsing to code generation
	example: let x=a+b*c
		parse tree
		compiler ignores operator priority ‚Üê implementer's choice
		Jack language does not have operator priority
		‚Üí put burden on the user



‚äº¬≤.üìπ unit 5.2 handling variables
	sum = x * (1 + rate)
		push x
		push 1
		push rate
		+
		*
		pop sum

	the VM language does not have symbolic variables
		only local, argument, this, that, etc.
		symbolic variables must be mapped to virual memory segments
			are sum, x, and rate field, static, local, or argument variables
	class-level variables: field, static
	subroutine-level variables: local, argument
	variable properties:
		name (identifier)
		type (int, char, boolean, class name)
		kind (field, static, local, argument)
		scope (class level, subroutine level)

	bundle of variable properties that must be maintained for every var in src
	the symbol table not only includes the kind of a variable, but also which number of that kind each variable is.

	every method subroutine has this as the first entry of its symbol table
		its kind of argument

	high level programming languages vary in terms of variable
		types, kinds, and scoping

	unlimited nested scoping can be handled with a linked list of symbol tables



‚äº¬≤ 5.1 code generation
	compiler II: code generation
	syntax analyzer: tokenizer + compilation engine (parser)
		XML meant to verify syntax analyzer understands syntactic structure
	project 11 throws out XML code. new goal:
		extend basic syntax anlyzer to adding code generation ability
		passive XML code ‚Üí morph into executable VM code
	each Jack class file compiled separately
	class: point
		class declaration ‚Üí {classVarDec*  subroutineDec*}

	compilation	is two separate and standalone steps:
		localized! modular strategy
		compile class-level code ‚Üê classVarDec*
		compile one subroutine at a time ‚Üê subroutineDec*
			we have 5 challenges: generate VM code to capture these semantics:
				challenge is bridging gap between simple VM code
					with complicated high-level language
			variables, expressions, flow of control, objects, arrays

	we will learn how programming languages work
		handle arrays and objects in low-level
		general techniques
			parsing
			recursive compilation
			code generation
			symbol tables
			memory management