<class>
  <keyword> class </keyword>
  <className> Square </className>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> x </fieldVariable>
    <symbol> , </symbol>
    <fieldVariable> y </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> size </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <className> Square </className>
    <subroutineName> new </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <argumentVariable> Ax </argumentVariable>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <argumentVariable> Ay </argumentVariable>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <argumentVariable> Asize </argumentVariable>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> x </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <argumentVariable> Ax </argumentVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> y </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <argumentVariable> Ay </argumentVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> size </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <argumentVariable> Asize </argumentVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <subroutineName> draw </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
              <term>
                <keyword> this </keyword>
              </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> dispose </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <className> Memory </className>
          <symbol> . </symbol>
          <subroutineName> deAlloc </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <keyword> this </keyword>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> draw </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <className> Screen </className>
          <symbol> . </symbol>
          <subroutineName> setColor </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <keyword> true </keyword>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <className> Screen </className>
          <symbol> . </symbol>
          <subroutineName> drawRectangle </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <thisVariable> x </thisVariable>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <thisVariable> y </thisVariable>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <thisVariable> x </thisVariable>
                </term>
                <symbol> + </symbol>
                <term>
                  <thisVariable> size </thisVariable>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <thisVariable> y </thisVariable>
                </term>
                <symbol> + </symbol>
                <term>
                  <thisVariable> size </thisVariable>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> erase </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <className> Screen </className>
          <symbol> . </symbol>
          <subroutineName> setColor </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <keyword> false </keyword>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <className> Screen </className>
          <symbol> . </symbol>
          <subroutineName> drawRectangle </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <thisVariable> x </thisVariable>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <thisVariable> y </thisVariable>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <thisVariable> x </thisVariable>
                </term>
                <symbol> + </symbol>
                <term>
                  <thisVariable> size </thisVariable>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <thisVariable> y </thisVariable>
                </term>
                <symbol> + </symbol>
                <term>
                  <thisVariable> size </thisVariable>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> incSize </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <symbol> ( </symbol>
                <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <thisVariable> y </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <thisVariable> size </thisVariable>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <integerConstant> 254 </integerConstant>
                    </term>
                </expression>
                <symbol> ) </symbol>
              </term>
              <symbol> &amp; </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <thisVariable> x </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <thisVariable> size </thisVariable>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <integerConstant> 510 </integerConstant>
                    </term>
                </expression>
                <symbol> ) </symbol>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <subroutineName> erase </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <thisVariable> size </thisVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> size </thisVariable>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <subroutineName> draw </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> decSize </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <thisVariable> size </thisVariable>
              </term>
              <symbol> &gt; </symbol>
              <term>
                <integerConstant> 2 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <subroutineName> erase </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <thisVariable> size </thisVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> size </thisVariable>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <subroutineName> draw </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> moveUp </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <thisVariable> y </thisVariable>
              </term>
              <symbol> &gt; </symbol>
              <term>
                <integerConstant> 1 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> false </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <thisVariable> y </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <thisVariable> size </thisVariable>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <thisVariable> y </thisVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> y </thisVariable>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> true </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> moveDown </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <symbol> ( </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
                <symbol> ) </symbol>
              </term>
              <symbol> &lt; </symbol>
              <term>
                <integerConstant> 254 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> false </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <thisVariable> y </thisVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> y </thisVariable>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> true </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <thisVariable> y </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <thisVariable> size </thisVariable>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> moveLeft </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <thisVariable> x </thisVariable>
              </term>
              <symbol> &gt; </symbol>
              <term>
                <integerConstant> 1 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> false </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <thisVariable> x </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <thisVariable> size </thisVariable>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <thisVariable> x </thisVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> x </thisVariable>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> true </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> moveRight </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <symbol> ( </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
                <symbol> ) </symbol>
              </term>
              <symbol> &lt; </symbol>
              <term>
                <integerConstant> 510 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> false </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <thisVariable> x </thisVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> x </thisVariable>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> true </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <thisVariable> x </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <thisVariable> size </thisVariable>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> size </thisVariable>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <symbol> } </symbol>
</class>
