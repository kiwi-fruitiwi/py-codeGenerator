<class>
  <keyword> class </keyword>
  <className> SquareGame </className>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <className> Square </className>
    <fieldVariable> square </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> direction </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <className> SquareGame </className>
    <subroutineName> new </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> square </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <className> Square </className>
                <symbol> . </symbol>
                <subroutineName> new </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                      <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <integerConstant> 30 </integerConstant>
                      </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> direction </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
              <term>
                <keyword> this </keyword>
              </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> dispose </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <thisVariable> square </thisVariable>
          <symbol> . </symbol>
          <subroutineName> dispose </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <className> Memory </className>
          <symbol> . </symbol>
          <subroutineName> deAlloc </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <keyword> this </keyword>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> moveSquare </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <thisVariable> direction </thisVariable>
              </term>
              <symbol> = </symbol>
              <term>
                <integerConstant> 1 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <thisVariable> square </thisVariable>
              <symbol> . </symbol>
              <subroutineName> moveUp </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <thisVariable> direction </thisVariable>
              </term>
              <symbol> = </symbol>
              <term>
                <integerConstant> 2 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <thisVariable> square </thisVariable>
              <symbol> . </symbol>
              <subroutineName> moveDown </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <thisVariable> direction </thisVariable>
              </term>
              <symbol> = </symbol>
              <term>
                <integerConstant> 3 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <thisVariable> square </thisVariable>
              <symbol> . </symbol>
              <subroutineName> moveLeft </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <thisVariable> direction </thisVariable>
              </term>
              <symbol> = </symbol>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <thisVariable> square </thisVariable>
              <symbol> . </symbol>
              <subroutineName> moveRight </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <className> Sys </className>
          <symbol> . </symbol>
          <subroutineName> wait </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <integerConstant> 5 </integerConstant>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> run </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <localVariable> key </localVariable>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <localVariable> exit </localVariable>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <localVariable> exit </localVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <keyword> false </keyword>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <symbol> ~ </symbol>
                <term>
                  <localVariable> exit </localVariable>
                </term>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <localVariable> key </localVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <localVariable> key </localVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <className> Keyboard </className>
                        <symbol> . </symbol>
                        <subroutineName> keyPressed </subroutineName>
                        <symbol> ( </symbol>
                        <expressionList>
                        </expressionList>
                        <symbol> ) </symbol>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <subroutineName> moveSquare </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <localVariable> key </localVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 81 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <localVariable> exit </localVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <keyword> true </keyword>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <localVariable> key </localVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 90 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <thisVariable> square </thisVariable>
                  <symbol> . </symbol>
                  <subroutineName> decSize </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <localVariable> key </localVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 88 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <thisVariable> square </thisVariable>
                  <symbol> . </symbol>
                  <subroutineName> incSize </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <localVariable> key </localVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 131 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <thisVariable> direction </thisVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <localVariable> key </localVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 133 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <thisVariable> direction </thisVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <integerConstant> 2 </integerConstant>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <localVariable> key </localVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 130 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <thisVariable> direction </thisVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <integerConstant> 3 </integerConstant>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <localVariable> key </localVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 132 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <thisVariable> direction </thisVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <integerConstant> 4 </integerConstant>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <symbol> ~ </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <localVariable> key </localVariable>
                          </term>
                          <symbol> = </symbol>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <localVariable> key </localVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <className> Keyboard </className>
                        <symbol> . </symbol>
                        <subroutineName> keyPressed </subroutineName>
                        <symbol> ( </symbol>
                        <expressionList>
                        </expressionList>
                        <symbol> ) </symbol>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <subroutineName> moveSquare </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <symbol> } </symbol>
</class>
