<class>
  <keyword> class </keyword>
  <className> Main </className>
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <subroutineName> main </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <className> PongGame </className>
        <localVariable> game </localVariable>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <className> PongGame </className>
          <symbol> . </symbol>
          <subroutineName> newInstance </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <localVariable> game </localVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <className> PongGame </className>
                <symbol> . </symbol>
                <subroutineName> getInstance </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                </expressionList>
                <symbol> ) </symbol>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <localVariable> game </localVariable>
          <symbol> . </symbol>
          <subroutineName> run </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <localVariable> game </localVariable>
          <symbol> . </symbol>
          <subroutineName> dispose </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <symbol> } </symbol>
</class>
