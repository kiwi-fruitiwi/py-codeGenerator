<class>
  <keyword> class </keyword>
  <className> PongGame </className>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <className> PongGame </className>
    <staticVariable> instance </staticVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <className> Bat </className>
    <fieldVariable> bat </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <className> Ball </className>
    <fieldVariable> ball </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> wall </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <fieldVariable> exit </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> score </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> lastWall </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> batWidth </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <className> PongGame </className>
    <subroutineName> new </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <className> Screen </className>
          <symbol> . </symbol>
          <subroutineName> clearScreen </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> batWidth </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <integerConstant> 50 </integerConstant>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> bat </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <className> Bat </className>
                <symbol> . </symbol>
                <subroutineName> new </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                      <term>
                        <integerConstant> 230 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <integerConstant> 229 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <thisVariable> batWidth </thisVariable>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <integerConstant> 7 </integerConstant>
                      </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> ball </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <className> Ball </className>
                <symbol> . </symbol>
                <subroutineName> new </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                      <term>
                        <integerConstant> 253 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <integerConstant> 222 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <integerConstant> 511 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <integerConstant> 229 </integerConstant>
                      </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <thisVariable> ball </thisVariable>
          <symbol> . </symbol>
          <subroutineName> setDestination </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <integerConstant> 400 </integerConstant>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <className> Screen </className>
          <symbol> . </symbol>
          <subroutineName> drawRectangle </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <integerConstant> 238 </integerConstant>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <integerConstant> 511 </integerConstant>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <integerConstant> 240 </integerConstant>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <className> Output </className>
          <symbol> . </symbol>
          <subroutineName> moveCursor </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <integerConstant> 22 </integerConstant>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <className> Output </className>
          <symbol> . </symbol>
          <subroutineName> printString </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <stringConstant> Score: 0 </stringConstant>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> exit </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <keyword> false </keyword>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> score </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> wall </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> lastWall </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
              <term>
                <keyword> this </keyword>
              </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> dispose </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <thisVariable> bat </thisVariable>
          <symbol> . </symbol>
          <subroutineName> dispose </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <thisVariable> ball </thisVariable>
          <symbol> . </symbol>
          <subroutineName> dispose </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <className> Memory </className>
          <symbol> . </symbol>
          <subroutineName> deAlloc </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <keyword> this </keyword>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <subroutineName> newInstance </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <staticVariable> instance </staticVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <className> PongGame </className>
                <symbol> . </symbol>
                <subroutineName> new </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                </expressionList>
                <symbol> ) </symbol>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> function </keyword>
    <className> PongGame </className>
    <subroutineName> getInstance </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
              <term>
                <staticVariable> instance </staticVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> run </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <localVariable> key </localVariable>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <symbol> ~ </symbol>
                <term>
                  <thisVariable> exit </thisVariable>
                </term>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                          <localVariable> key </localVariable>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> &amp; </symbol>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                          <symbol> ~ </symbol>
                          <term>
                            <thisVariable> exit </thisVariable>
                          </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <localVariable> key </localVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <className> Keyboard </className>
                        <symbol> . </symbol>
                        <subroutineName> keyPressed </subroutineName>
                        <symbol> ( </symbol>
                        <expressionList>
                        </expressionList>
                        <symbol> ) </symbol>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <thisVariable> bat </thisVariable>
                  <symbol> . </symbol>
                  <subroutineName> move </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <subroutineName> moveBall </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <className> Sys </className>
                  <symbol> . </symbol>
                  <subroutineName> wait </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                        <term>
                          <integerConstant> 50 </integerConstant>
                        </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <localVariable> key </localVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 130 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <thisVariable> bat </thisVariable>
                  <symbol> . </symbol>
                  <subroutineName> setDirection </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
              <elseStatement>
                <keyword> else </keyword>
                <symbol> { </symbol>
                <statements>
                  <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                          <localVariable> key </localVariable>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 132 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                      <doStatement>
                        <keyword> do </keyword>
                        <thisVariable> bat </thisVariable>
                        <symbol> . </symbol>
                        <subroutineName> setDirection </subroutineName>
                        <symbol> ( </symbol>
                        <expressionList>
                          <expression>
                              <term>
                                <integerConstant> 2 </integerConstant>
                              </term>
                          </expression>
                        </expressionList>
                        <symbol> ) </symbol>
                        <symbol> ; </symbol>
                      </doStatement>
                    </statements>
                    <symbol> } </symbol>
                    <elseStatement>
                      <keyword> else </keyword>
                      <symbol> { </symbol>
                      <statements>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                              <term>
                                <localVariable> key </localVariable>
                              </term>
                              <symbol> = </symbol>
                              <term>
                                <integerConstant> 140 </integerConstant>
                              </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <letStatement>
                              <keyword> let </keyword>
                              <thisVariable> exit </thisVariable>
                              <symbol> = </symbol>
                              <expression>
                                  <term>
                                    <keyword> true </keyword>
                                  </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                    </elseStatement>
                  </ifStatement>
                </statements>
                <symbol> } </symbol>
              </elseStatement>
            </ifStatement>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                          <symbol> ~ </symbol>
                          <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                  <localVariable> key </localVariable>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                  <integerConstant> 0 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                          </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> &amp; </symbol>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                          <symbol> ~ </symbol>
                          <term>
                            <thisVariable> exit </thisVariable>
                          </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <localVariable> key </localVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <className> Keyboard </className>
                        <symbol> . </symbol>
                        <subroutineName> keyPressed </subroutineName>
                        <symbol> ( </symbol>
                        <expressionList>
                        </expressionList>
                        <symbol> ) </symbol>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <thisVariable> bat </thisVariable>
                  <symbol> . </symbol>
                  <subroutineName> move </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <subroutineName> moveBall </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <className> Sys </className>
                  <symbol> . </symbol>
                  <subroutineName> wait </subroutineName>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                        <term>
                          <integerConstant> 50 </integerConstant>
                        </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <thisVariable> exit </thisVariable>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <className> Output </className>
              <symbol> . </symbol>
              <subroutineName> moveCursor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <integerConstant> 10 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <integerConstant> 27 </integerConstant>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Output </className>
              <symbol> . </symbol>
              <subroutineName> printString </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <stringConstant> Game Over </stringConstant>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> moveBall </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <localVariable> bouncingDirection </localVariable>
        <symbol> , </symbol>
        <localVariable> batLeft </localVariable>
        <symbol> , </symbol>
        <localVariable> batRight </localVariable>
        <symbol> , </symbol>
        <localVariable> ballLeft </localVariable>
        <symbol> , </symbol>
        <localVariable> ballRight </localVariable>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> wall </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <thisVariable> ball </thisVariable>
                <thisVariable> ball </thisVariable>
                <symbol> . </symbol>
                <subroutineName> move </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                </expressionList>
                <symbol> ) </symbol>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <symbol> ( </symbol>
                <expression>
                    <term>
                      <thisVariable> wall </thisVariable>
                    </term>
                    <symbol> &gt; </symbol>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                </expression>
                <symbol> ) </symbol>
              </term>
              <symbol> &amp; </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                            <term>
                              <thisVariable> wall </thisVariable>
                            </term>
                            <symbol> = </symbol>
                            <term>
                              <thisVariable> lastWall </thisVariable>
                            </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                </expression>
                <symbol> ) </symbol>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <thisVariable> lastWall </thisVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> wall </thisVariable>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <localVariable> bouncingDirection </localVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <localVariable> batLeft </localVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> bat </thisVariable>
                    <thisVariable> bat </thisVariable>
                    <symbol> . </symbol>
                    <subroutineName> getLeft </subroutineName>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <localVariable> batRight </localVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> bat </thisVariable>
                    <thisVariable> bat </thisVariable>
                    <symbol> . </symbol>
                    <subroutineName> getRight </subroutineName>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <localVariable> ballLeft </localVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> ball </thisVariable>
                    <thisVariable> ball </thisVariable>
                    <symbol> . </symbol>
                    <subroutineName> getLeft </subroutineName>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <localVariable> ballRight </localVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> ball </thisVariable>
                    <thisVariable> ball </thisVariable>
                    <symbol> . </symbol>
                    <subroutineName> getRight </subroutineName>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <thisVariable> wall </thisVariable>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 4 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <thisVariable> exit </thisVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                            <term>
                              <localVariable> batLeft </localVariable>
                            </term>
                            <symbol> &gt; </symbol>
                            <term>
                              <localVariable> ballRight </localVariable>
                            </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                      <symbol> | </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                            <term>
                              <localVariable> batRight </localVariable>
                            </term>
                            <symbol> &lt; </symbol>
                            <term>
                              <localVariable> ballLeft </localVariable>
                            </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                      <term>
                        <symbol> ~ </symbol>
                        <term>
                          <thisVariable> exit </thisVariable>
                        </term>
                      </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <localVariable> ballRight </localVariable>
                          </term>
                          <symbol> &lt; </symbol>
                          <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                  <localVariable> batLeft </localVariable>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                  <integerConstant> 10 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <localVariable> bouncingDirection </localVariable>
                          <symbol> = </symbol>
                          <expression>
                              <term>
                                <symbol> - </symbol>
                                <term>
                                  <integerConstant> 1 </integerConstant>
                                </term>
                              </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                      <elseStatement>
                        <keyword> else </keyword>
                        <symbol> { </symbol>
                        <statements>
                          <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                  <localVariable> ballLeft </localVariable>
                                </term>
                                <symbol> &gt; </symbol>
                                <term>
                                  <symbol> ( </symbol>
                                  <expression>
                                      <term>
                                        <localVariable> batRight </localVariable>
                                      </term>
                                      <symbol> - </symbol>
                                      <term>
                                        <integerConstant> 10 </integerConstant>
                                      </term>
                                  </expression>
                                  <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                              <letStatement>
                                <keyword> let </keyword>
                                <localVariable> bouncingDirection </localVariable>
                                <symbol> = </symbol>
                                <expression>
                                    <term>
                                      <integerConstant> 1 </integerConstant>
                                    </term>
                                </expression>
                                <symbol> ; </symbol>
                              </letStatement>
                            </statements>
                            <symbol> } </symbol>
                          </ifStatement>
                        </statements>
                        <symbol> } </symbol>
                      </elseStatement>
                    </ifStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <thisVariable> batWidth </thisVariable>
                      <symbol> = </symbol>
                      <expression>
                          <term>
                            <thisVariable> batWidth </thisVariable>
                          </term>
                          <symbol> - </symbol>
                          <term>
                            <integerConstant> 2 </integerConstant>
                          </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <thisVariable> bat </thisVariable>
                      <symbol> . </symbol>
                      <subroutineName> setWidth </subroutineName>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                            <term>
                              <thisVariable> batWidth </thisVariable>
                            </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <thisVariable> score </thisVariable>
                      <symbol> = </symbol>
                      <expression>
                          <term>
                            <thisVariable> score </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <integerConstant> 1 </integerConstant>
                          </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <className> Output </className>
                      <symbol> . </symbol>
                      <subroutineName> moveCursor </subroutineName>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                            <term>
                              <integerConstant> 22 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                              <integerConstant> 7 </integerConstant>
                            </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <className> Output </className>
                      <symbol> . </symbol>
                      <subroutineName> printInt </subroutineName>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                            <term>
                              <thisVariable> score </thisVariable>
                            </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <doStatement>
              <keyword> do </keyword>
              <thisVariable> ball </thisVariable>
              <symbol> . </symbol>
              <subroutineName> bounce </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <localVariable> bouncingDirection </localVariable>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <symbol> } </symbol>
</class>
