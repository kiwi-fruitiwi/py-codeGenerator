<class>
  <keyword> class </keyword>
  <className> Bat </className>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> x </fieldVariable>
    <symbol> , </symbol>
    <fieldVariable> y </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> width </fieldVariable>
    <symbol> , </symbol>
    <fieldVariable> height </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <fieldVariable> direction </fieldVariable>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <className> Bat </className>
    <subroutineName> new </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <argumentVariable> Ax </argumentVariable>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <argumentVariable> Ay </argumentVariable>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <argumentVariable> Awidth </argumentVariable>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <argumentVariable> Aheight </argumentVariable>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> x </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <argumentVariable> Ax </argumentVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> y </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <argumentVariable> Ay </argumentVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> width </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <argumentVariable> Awidth </argumentVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> height </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <argumentVariable> Aheight </argumentVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> direction </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <integerConstant> 2 </integerConstant>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <subroutineName> show </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
              <term>
                <keyword> this </keyword>
              </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> dispose </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <className> Memory </className>
          <symbol> . </symbol>
          <subroutineName> deAlloc </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <keyword> this </keyword>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> show </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <className> Screen </className>
          <symbol> . </symbol>
          <subroutineName> setColor </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <keyword> true </keyword>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <subroutineName> draw </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> hide </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <className> Screen </className>
          <symbol> . </symbol>
          <subroutineName> setColor </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <keyword> false </keyword>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <subroutineName> draw </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> draw </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <className> Screen </className>
          <symbol> . </symbol>
          <subroutineName> drawRectangle </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
                <term>
                  <thisVariable> x </thisVariable>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <thisVariable> y </thisVariable>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <thisVariable> x </thisVariable>
                </term>
                <symbol> + </symbol>
                <term>
                  <thisVariable> width </thisVariable>
                </term>
            </expression>
            <symbol> , </symbol>
            <expression>
                <term>
                  <thisVariable> y </thisVariable>
                </term>
                <symbol> + </symbol>
                <term>
                  <thisVariable> height </thisVariable>
                </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> setDirection </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <argumentVariable> Adirection </argumentVariable>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> direction </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <argumentVariable> Adirection </argumentVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <subroutineName> getLeft </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
              <term>
                <thisVariable> x </thisVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <subroutineName> getRight </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
              <term>
                <thisVariable> x </thisVariable>
              </term>
              <symbol> + </symbol>
              <term>
                <thisVariable> width </thisVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> setWidth </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <argumentVariable> Awidth </argumentVariable>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <subroutineName> hide </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <thisVariable> width </thisVariable>
          <symbol> = </symbol>
          <expression>
              <term>
                <argumentVariable> Awidth </argumentVariable>
              </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <subroutineName> show </subroutineName>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutineName> move </subroutineName>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
              <term>
                <thisVariable> direction </thisVariable>
              </term>
              <symbol> = </symbol>
              <term>
                <integerConstant> 1 </integerConstant>
              </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <thisVariable> x </thisVariable>
              <symbol> = </symbol>
              <expression>
                  <term>
                    <thisVariable> x </thisVariable>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 4 </integerConstant>
                  </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                  <term>
                    <thisVariable> x </thisVariable>
                  </term>
                  <symbol> &lt; </symbol>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <thisVariable> x </thisVariable>
                  <symbol> = </symbol>
                  <expression>
                      <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> false </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <thisVariable> x </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <thisVariable> width </thisVariable>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <thisVariable> x </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <thisVariable> width </thisVariable>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> height </thisVariable>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> setColor </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <keyword> true </keyword>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <className> Screen </className>
              <symbol> . </symbol>
              <subroutineName> drawRectangle </subroutineName>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 3 </integerConstant>
                    </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                    <term>
                      <thisVariable> y </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <thisVariable> height </thisVariable>
                    </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
          <elseStatement>
            <keyword> else </keyword>
            <symbol> { </symbol>
            <statements>
              <letStatement>
                <keyword> let </keyword>
                <thisVariable> x </thisVariable>
                <symbol> = </symbol>
                <expression>
                    <term>
                      <thisVariable> x </thisVariable>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
              <ifStatement>
                <keyword> if </keyword>
                <symbol> ( </symbol>
                <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                          <term>
                            <thisVariable> x </thisVariable>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <thisVariable> width </thisVariable>
                          </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> &gt; </symbol>
                    <term>
                      <integerConstant> 511 </integerConstant>
                    </term>
                </expression>
                <symbol> ) </symbol>
                <symbol> { </symbol>
                <statements>
                  <letStatement>
                    <keyword> let </keyword>
                    <thisVariable> x </thisVariable>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                          <integerConstant> 511 </integerConstant>
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <thisVariable> width </thisVariable>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                  </letStatement>
                </statements>
                <symbol> } </symbol>
              </ifStatement>
              <doStatement>
                <keyword> do </keyword>
                <className> Screen </className>
                <symbol> . </symbol>
                <subroutineName> setColor </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                      <term>
                        <keyword> false </keyword>
                      </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
                <symbol> ; </symbol>
              </doStatement>
              <doStatement>
                <keyword> do </keyword>
                <className> Screen </className>
                <symbol> . </symbol>
                <subroutineName> drawRectangle </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                      <term>
                        <thisVariable> x </thisVariable>
                      </term>
                      <symbol> - </symbol>
                      <term>
                        <integerConstant> 4 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <thisVariable> y </thisVariable>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <thisVariable> x </thisVariable>
                      </term>
                      <symbol> - </symbol>
                      <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <thisVariable> y </thisVariable>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <thisVariable> height </thisVariable>
                      </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
                <symbol> ; </symbol>
              </doStatement>
              <doStatement>
                <keyword> do </keyword>
                <className> Screen </className>
                <symbol> . </symbol>
                <subroutineName> setColor </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                      <term>
                        <keyword> true </keyword>
                      </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
                <symbol> ; </symbol>
              </doStatement>
              <doStatement>
                <keyword> do </keyword>
                <className> Screen </className>
                <symbol> . </symbol>
                <subroutineName> drawRectangle </subroutineName>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                            <term>
                              <thisVariable> x </thisVariable>
                            </term>
                            <symbol> + </symbol>
                            <term>
                              <thisVariable> width </thisVariable>
                            </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                      <symbol> - </symbol>
                      <term>
                        <integerConstant> 3 </integerConstant>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <thisVariable> y </thisVariable>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <thisVariable> x </thisVariable>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <thisVariable> width </thisVariable>
                      </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                      <term>
                        <thisVariable> y </thisVariable>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <thisVariable> height </thisVariable>
                      </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
                <symbol> ; </symbol>
              </doStatement>
            </statements>
            <symbol> } </symbol>
          </elseStatement>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  
  <symbol> } </symbol>
</class>
