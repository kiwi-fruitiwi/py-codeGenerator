


















05:33 pm Saturday, January 14, 2023
[1733]→ ⚙️seven: code → arithmetic expression involving constants only
	do + return statements

	🌊 bite list
		compileClass saves class name → field
		do → function className.functionName varDec* wait in srtBody
		how do we determine printInt has 1 argument? parameterList
		read expression tokens
			save ops, apply in order

		how do we know printInt needs a trash pop?
		if 'return;' → push constant 0 to follow the contract

    seven.jack
        class Main {
          function void main() {
            do Output.printInt(1 + (2 * 3));
            return;
          }
        }

	target VM code
		function Main.main 0 ← wait until varDec* in subroutineBody
        push constant 1
        push constant 2
        push constant 3
        call Math.multiply 2 ← operator
        add ← operator
        call Output.printInt 1 ← keeping track of parameterList elements
        🌟 pop temp 0 ← trash pop
        🌟 push constant 0
        return

	☐ subroutine: (constructor | function | method)
		how are these handled differently in compilation?
			treat these all as functions for now

	what is the current compilationEngine workflow for compiling a subroutine?
	    class: class className { classVarDec* subroutineDec* }
	        subroutineDec handled by compileSubroutineDec
		        self.symbolTables.startSubroutine()
                checks for starting token: constructor, function, method
                   → __subroutineDecHelper
                    handles starting token
                    ❔ how does the compiler handle return types? void | type
                    compileParameterList
                    compileSubroutineBody → { varDec* statements }
                        🌟 after varDec* we will know nLocals for VM function

	→ analyze syntax analyzer output
	→ infix → postfix? storing ops in list, which we execute later
	→ 1+(2*3): the (2*3) is its own expression: term contains (expr)

	🔬 [function, call] arguments → [nLocals, nArgs]
	🔬 parse trees
	🏭 use provided Jack compiler to diff with our VM output before
		going to VM emulator. command prompt






#   ☒ compileIdentifier split into three methods
#		☒ compileClassName
#			writes <class name> inside of <identifier> XML tag
#		☒ compileSubroutineName
#			writes <subroutine name> inside of <identifier> XML tag
#		☒ compileVariable(varType, varKind)
#			invokes self.symbolTables.define(name, type, kind)
#			name is next token
#	☐ call all three methods appropriate to replace every compileIdentifier call
#	☐ compileType needs additional argument: variable kind → SFVA
#		used in: (static field variable/local argument)
#			classVarDec ← static, field
#				VarKind.STATIC/FIELD
#			varDec ← local/var
#				VarKind.VAR
#			subRoutineDec ← argument via parameterList, but not before srtName
#				VarKind.ARGUMENT
#		example: var Point p1; ← compiler just updates the symbolTable with:
#			this would be a varDec case: var type varName (, varName)*;
#				symbolTable.define(name, type, kind) call a result of cpVarDeck
#					name: varName
#					type: type
#					kind: VarKind.VAR
#			symbolTable.define(p1, Point, VarKind.VAR)
#		example: static Point p1 ← cpClassVarDec uses VarKind.STATIC
#		example: field Point p1 ← cpClassVarDec uses VarKind.FIELD
#
#
#	☐ symbol table output requirements
#		identifier's name ← already done in p10
#		identifier's category ← var, arg, static, field, class, subroutine
#		if category in [var, arg, static, field], running index
#		identifier defined or used ❔



09:17 pm Sunday, December 04, 2022
[2117]→ old compileSimpleTerm code

	# the expressionless tests for project 10 use simplified 'term' tokens
	# that can only be single identifiers or the keyword 'this'.
	def compileSimpleTerm(self):
		# the simple version of this rule is identifier | 'this' ←🦔

		self.write('<term>\n')
		self.indent()
		self.advance()
		value = None

		match self.tk.getTokenType():
			case TokenType.IDENTIFIER:
				value = self.tk.identifier()
				self.write(f'<identifier> {value} </identifier>\n')
			case TokenType.KEYWORD:
				assert self.tk.keyWord() in ['this', 'false', 'true', 'null']
				value = self.tk.keyWord()
				self.write(f'<keyword> {value} </keyword>\n')

			# adding extra cases: integer and string constant
			case TokenType.INT_CONST:
				value = self.tk.intVal()
				self.write(f'<integerConstant> {value} </integerConstant>\n')
			case TokenType.STRING_CONST:
				value = self.tk.stringVal()
				self.write(f'<stringConstant> {value} </stringConstant>\n')

			case TokenType.SYMBOL:
				value = convertSymbolToHtml(self.tk.symbol())
				self.write(f'<symbol> {value} </symbol>\n')
			case _:
				raise ValueError(
					f'simple term was not an identifier or keywordConstant: {self.tk.getTokenType()}→{value}')

		self.outdent()
		self.write('</term>\n')