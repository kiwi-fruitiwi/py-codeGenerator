#   ☒ compileIdentifier split into three methods
#		☒ compileClassName
#			writes <class name> inside of <identifier> XML tag
#		☒ compileSubroutineName
#			writes <subroutine name> inside of <identifier> XML tag
#		☒ compileVariable(varType, varKind)
#			invokes self.symbolTables.define(name, type, kind)
#			name is next token
#	☐ call all three methods appropriate to replace every compileIdentifier call
#	☐ compileType needs additional argument: variable kind → SFVA
#		used in: (static field variable/local argument)
#			classVarDec ← static, field
#				VarKind.STATIC/FIELD
#			varDec ← local/var
#				VarKind.VAR
#			subRoutineDec ← argument via parameterList, but not before srtName
#				VarKind.ARGUMENT
#		example: var Point p1; ← compiler just updates the symbolTable with:
#			this would be a varDec case: var type varName (, varName)*;
#				symbolTable.define(name, type, kind) call a result of cpVarDeck
#					name: varName
#					type: type
#					kind: VarKind.VAR
#			symbolTable.define(p1, Point, VarKind.VAR)
#		example: static Point p1 ← cpClassVarDec uses VarKind.STATIC
#		example: field Point p1 ← cpClassVarDec uses VarKind.FIELD
#
#
#	☐ symbol table output requirements
#		identifier's name ← already done in p10
#		identifier's category ← var, arg, static, field, class, subroutine
#		if category in [var, arg, static, field], running index
#		identifier defined or used ❔