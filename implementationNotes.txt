#   ‚òí compileIdentifier split into three methods
#		‚òí compileClassName
#			writes <class name> inside of <identifier> XML tag
#		‚òí compileSubroutineName
#			writes <subroutine name> inside of <identifier> XML tag
#		‚òí compileVariable(varType, varKind)
#			invokes self.symbolTables.define(name, type, kind)
#			name is next token
#	‚òê call all three methods appropriate to replace every compileIdentifier call
#	‚òê compileType needs additional argument: variable kind ‚Üí SFVA
#		used in: (static field variable/local argument)
#			classVarDec ‚Üê static, field
#				VarKind.STATIC/FIELD
#			varDec ‚Üê local/var
#				VarKind.VAR
#			subRoutineDec ‚Üê argument via parameterList, but not before srtName
#				VarKind.ARGUMENT
#		example: var Point p1; ‚Üê compiler just updates the symbolTable with:
#			this would be a varDec case: var type varName (, varName)*;
#				symbolTable.define(name, type, kind) call a result of cpVarDeck
#					name: varName
#					type: type
#					kind: VarKind.VAR
#			symbolTable.define(p1, Point, VarKind.VAR)
#		example: static Point p1 ‚Üê cpClassVarDec uses VarKind.STATIC
#		example: field Point p1 ‚Üê cpClassVarDec uses VarKind.FIELD
#
#
#	‚òê symbol table output requirements
#		identifier's name ‚Üê already done in p10
#		identifier's category ‚Üê var, arg, static, field, class, subroutine
#		if category in [var, arg, static, field], running index
#		identifier defined or used ‚ùî



09:17 pm Sunday, December 04, 2022
[2117]‚Üí old compileSimpleTerm code

	# the expressionless tests for project 10 use simplified 'term' tokens
	# that can only be single identifiers or the keyword 'this'.
	def compileSimpleTerm(self):
		# the simple version of this rule is identifier | 'this' ‚Üêü¶î

		self.write('<term>\n')
		self.indent()
		self.advance()
		value = None

		match self.tk.getTokenType():
			case TokenType.IDENTIFIER:
				value = self.tk.identifier()
				self.write(f'<identifier> {value} </identifier>\n')
			case TokenType.KEYWORD:
				assert self.tk.keyWord() in ['this', 'false', 'true', 'null']
				value = self.tk.keyWord()
				self.write(f'<keyword> {value} </keyword>\n')

			# adding extra cases: integer and string constant
			case TokenType.INT_CONST:
				value = self.tk.intVal()
				self.write(f'<integerConstant> {value} </integerConstant>\n')
			case TokenType.STRING_CONST:
				value = self.tk.stringVal()
				self.write(f'<stringConstant> {value} </stringConstant>\n')

			case TokenType.SYMBOL:
				value = convertSymbolToHtml(self.tk.symbol())
				self.write(f'<symbol> {value} </symbol>\n')
			case _:
				raise ValueError(
					f'simple term was not an identifier or keywordConstant: {self.tk.getTokenType()}‚Üí{value}')

		self.outdent()
		self.write('</term>\n')